[{"/Users/sese11087/Documents/Coding/Job/Projects/todo-app/src/index.js":"1","/Users/sese11087/Documents/Coding/Job/Projects/todo-app/src/App.js":"2","/Users/sese11087/Documents/Coding/Job/Projects/todo-app/src/reportWebVitals.js":"3"},{"size":535,"mtime":1690818359187,"results":"4","hashOfConfig":"5"},{"size":7872,"mtime":1690836256125,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1690818359187,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1ks1bcd",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/sese11087/Documents/Coding/Job/Projects/todo-app/src/index.js",[],[],[],"/Users/sese11087/Documents/Coding/Job/Projects/todo-app/src/App.js",["19","20"],[],"import logo from './logo.png';\nimport './App.css';\nimport { Button, TextField } from '@mui/material';\nimport { BrowserRouter as Router, Route, Link, Routes, useNavigate } from 'react-router-dom';\nimport React, { useState, useEffect } from 'react';\n\nfunction Register() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const navigate = useNavigate(); // Initialize the useNavigate hook\n\n  const registerUser = () => {\n    fetch('/api/register', { // Make sure the API endpoint is correct\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, password, email }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.success) {\n          navigate('/'); // Redirect to the home page\n        } else {\n          // Handle registration failure, possibly by displaying an error message\n        }\n      });\n  };\n\n  return (\n    <div className=\"register-container\">\n      <h1>Register</h1>\n      <input type=\"text\" placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n      <input type=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)} />\n      <input type=\"email\" placeholder=\"Email\" onChange={(e) => setEmail(e.target.value)} />\n      <button onClick={registerUser}>Register</button>\n    </div>\n  );\n}\n\n\nfunction Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate(); // Initialize the useNavigate hook\n\n  const loginUser = () => {\n    fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, password }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.success) {\n          localStorage.setItem('token', data.token);\n          navigate('/'); // Redirect to the home page\n        } else {\n          // Handle login failure\n        }\n      });\n  };\n\n  return (\n    <div className=\"login-container\">\n      <h1>Login</h1>\n      <input type=\"text\" placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n      <input type=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)} />\n      <button onClick={loginUser}>Login</button>\n    </div>\n  );\n}\n\nfunction MyComponent() {\n  return (\n    <div>\n      <TextField label=\"Username\" variant=\"outlined\" />\n      <Button variant=\"contained\" color=\"primary\">\n        Login\n      </Button>\n    </div>\n  );\n}\n\nfunction App() {\n  const [tasks, setTasks] = useState(() => {\n    // Try to load tasks from local storage when initializing state\n    const savedTasks = localStorage.getItem('tasks');\n    return savedTasks ? JSON.parse(savedTasks) : [];\n  });\n\n  const [filter, setFilter] = useState('All');\n\n  const [inputValue, setInputValue] = useState('');\n\n  const addTask = (taskTitle, priority) => {\n    const newTask = { title: taskTitle, completed: false, priority: priority };\n    setTasks([...tasks, newTask]);\n  };\n  const [priorityValue, setPriorityValue] = useState('Normal');\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'High':\n        return 'red';\n      case 'Normal':\n        return '#c1ff72';\n      case 'Low':\n        return 'white';\n      default:\n        return 'black'; // Default color, if priority is something else\n    }\n  };\n\n\n  const toggleCompletion = (index) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[index].completed = !updatedTasks[index].completed;\n    setTasks(updatedTasks);\n  };\n\n  const deleteTask = (index) => {\n    const updatedTasks = [...tasks];\n    updatedTasks.splice(index, 1);\n    setTasks(updatedTasks);\n  };\n\n  const [editingIndex, setEditingIndex] = useState(null);\n  const startEditing = (index) => {\n    setEditingIndex(index);\n  };\n  const saveEdit = (title) => {\n    const updatedTasks = [...tasks];\n    updatedTasks[editingIndex].title = title;\n    setTasks(updatedTasks);\n    setEditingIndex(null);\n  };\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  let filteredTasks = tasks;\n  if (filter === 'Completed') {\n    filteredTasks = tasks.filter(task => task.completed);\n  } else if (filter === 'Incomplete') {\n    filteredTasks = tasks.filter(task => !task.completed);\n  } else if (filter === 'High' || filter === 'Normal' || filter === 'Low') {\n    filteredTasks = tasks.filter(task => task.priority === filter);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>My To-Do List</h1>\n      <div>\n        <div>\n          <select class=\"filter\" value={filter} onChange={(e) => setFilter(e.target.value)}>\n            <option value=\"All\">All Tasks</option>\n            <option value=\"Completed\">Completed Tasks</option>\n            <option value=\"Incomplete\">Incomplete Tasks</option>\n            <option value=\"High\">High Priority</option>\n            <option value=\"Normal\">Normal Priority</option>\n            <option value=\"Low\">Low Priority</option>\n          </select>\n        </div>\n\n        <input\n          type=\"text\"\n          placeholder=\"Add a new task\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n        />\n        <select\n          value={priorityValue}\n          onChange={(e) => setPriorityValue(e.target.value)}\n        >\n          <option value=\"Low\">Low</option>\n          <option value=\"Normal\">Normal</option>\n          <option value=\"High\">High</option>\n        </select>\n        <button onClick={() => addTask(inputValue, priorityValue)}>Add</button>\n      </div>\n      <ul>\n        {filteredTasks.map((task, index) => (\n          <li key={index}>\n            {editingIndex === index ? (\n              <>\n                <input\n                  type=\"text\"\n                  value={task.title}\n                  onChange={(e) => {\n                    const updatedTasks = [...tasks];\n                    updatedTasks[index].title = e.target.value;\n                    setTasks(updatedTasks);\n                  }}\n                />\n                <button onClick={() => saveEdit(task.title)}>Save</button>\n              </>\n            ) : (\n              <>\n                {task.completed ? (\n                  <s>\n                    {task.title} {\" \"}\n                    <span style={{ color: getPriorityColor(task.priority), fontWeight: \"bold\" }}>\n                      {task.priority}\n                    </span>\n                  </s>\n                ) : (\n                  <>\n                    {task.title} {\" \"}\n                    <span style={{ color: getPriorityColor(task.priority), fontWeight: \"bold\" }}>\n                      {task.priority}\n                    </span>\n                  </>\n                )}\n                <button onClick={() => toggleCompletion(index)}>Toggle</button>\n                <button onClick={() => deleteTask(index)}>Delete</button>\n                <button onClick={() => startEditing(index)}>Edit</button>\n              </>\n            )}\n          </li>\n        ))}\n      </ul>\n\n    </div>\n  );\n}\n\nfunction MainApp() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/register\" className=\"nav-link\">Register</Link>\n            </li>\n            <li>\n              <Link to=\"/login\" className=\"nav-link\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/\" className=\"nav-link\">Home</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Routes>\n          <Route path=\"/register\" element={<Register />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/\" element={<App />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nexport default MainApp;","/Users/sese11087/Documents/Coding/Job/Projects/todo-app/src/reportWebVitals.js",[],[],{"ruleId":"21","severity":1,"message":"22","line":1,"column":8,"nodeType":"23","messageId":"24","endLine":1,"endColumn":12},{"ruleId":"21","severity":1,"message":"25","line":77,"column":10,"nodeType":"23","messageId":"24","endLine":77,"endColumn":21},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'MyComponent' is defined but never used."]